{"ast":null,"code":"import _classCallCheck from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/opt/lampp/htdocs/react_applications/start_react/start_react/src/components/counterComponent.jsx\";\nimport React, { Component } from 'react';\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  //SETTING OBJECT\n  // state = { \n  //     count: 0 \n  //  };\n  // render() { \n  //     return (<div>\n  //                 <span> {this.formateCount()}</span>\n  //                 <button>Increment</button>\n  //             </div>);\n  // }\n  // formateCount(){\n  //     const {count} = this.state;\n  //     return count ===0?<h2>Zero</h2>: count;\n  // }\n  //ADD SOME MORE OBJECT ELEMENTS AND USE IT\n  // state = { \n  //     count: 0,\n  //     imageUrl : \"https://picsum.photos/200\"\n  //  };\n  // render() { \n  //     return (<div>\n  //                 <img src={this.state.imageUrl} alt=\"\" />\n  //                 <span> {this.formateCount()}</span>\n  //                 <button>Increment</button>\n  //             </div>);\n  // }\n  // formateCount(){\n  //     const {count} = this.state;\n  //     return count ===0?<h2>Zero</h2>: count;\n  // }\n  //SETTING ATTRIBUTIES\n  // state = { \n  //     count: 0\n  //  };\n  //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n  // render() { \n  //     return (<div>\n  //                 <span style={this.batchStyle} className=\"badge badge-primary m-2\"> {this.formateCount()}</span>\n  //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n  //             </div>);\n  // }\n  // formateCount(){\n  //     const {count} = this.state;\n  //     return count ===0?<h2>Zero</h2>: count;\n  // }\n  //RENDERING CLASSESS DYNAMICALLY\n  // state = { \n  //     count: 1\n  //  };\n  //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n  // render() \n  // { \n  //     return (<div>\n  //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n  //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n  //             </div>);\n  // }\n  // getBadgeClasses() {\n  //     let classes = \"badge m-2 badge-\";\n  //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n  //     return classes;\n  // }\n  // formateCount(){\n  //     const {count} = this.state;\n  //     //return count ===0?<h2>Zero</h2>: count;\n  //     return count ===0? \"Zero\": count;\n  // }\n  //RENDERING LISTS\n  // state = { \n  //     count: 1,\n  //     tags:['tag1','tag2','tag3']\n  //  };\n  //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n  // render() \n  // { \n  //     return (<div>\n  //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n  //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n  //                 <ul>\n  //                     {/* it works as for looping cause it doesnt have looping */}\n  //                     {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n  //                 </ul>\n  //             </div>);\n  // }\n  // getBadgeClasses() {\n  //     let classes = \"badge m-2 badge-\";\n  //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n  //     return classes;\n  // }\n  // formateCount(){\n  //     const {count} = this.state;\n  //     //return count ===0?<h2>Zero</h2>: count;\n  //     return count ===0? \"Zero\": count;\n  // }\n  //CONDITIONAL RENDERING\n  // state = { \n  //     count: 1,\n  //     tags:[]\n  //  };\n  //  renderTags(){\n  //      if(this.state.tags.length ===0) return <p>There are no tags!</p>;\n  //      return <ul>{this.state.tags.map(tag => <li key=\"{tag}\">{tag}</li>)}</ul>;\n  //  }\n  //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n  // render() \n  // { \n  //     return (<div>\n  //                 {this.state.tags.length === 0 && 'please create a new tag!'}\n  //                 {this.renderTags()}\n  //             </div>);\n  // }\n  //HANDLING EVENTS\n  //problem: here if we create any event method, there is a problem \n  //which it can not be accessed 'this' because of strict mode \n  //so we cant access any method or variables from handler.\n  //solution: bind method or error\n  //bind method is just use constructor\n  function Counter() {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Counter).call(this)); //every handler needs to bind like this way\n\n    _this.state = {\n      count: 1,\n      tags: ['tag1', 'tag2', 'tag3']\n    };\n    _this.batchStyle = {\n      fontSize: 20,\n      fontWeight: \"bold\"\n    };\n    _this.handleIncrement = _this.handleIncrement.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"handleIncrement\",\n    value: function handleIncrement() {\n      console.log(\"Increment Clicked\", this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: this.batchStyle,\n        className: this.getBadgeClasses(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \" \", this.formateCount()), React.createElement(\"button\", {\n        onClick: this.handleIncrement,\n        className: \"btn btn-secondary btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Increment\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, this.state.tags.map(function (tag) {\n        return React.createElement(\"li\", {\n          key: tag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, tag);\n      })));\n    }\n  }, {\n    key: \"getBadgeClasses\",\n    value: function getBadgeClasses() {\n      var classes = \"badge m-2 badge-\";\n      classes += this.state.count === 0 ? \"warning\" : \"primary\";\n      return classes;\n    }\n  }, {\n    key: \"formateCount\",\n    value: function formateCount() {\n      var count = this.state.count; //return count ===0?<h2>Zero</h2>: count;\n\n      return count === 0 ? \"Zero\" : count;\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nexport default Counter;","map":{"version":3,"sources":["/opt/lampp/htdocs/react_applications/start_react/start_react/src/components/counterComponent.jsx"],"names":["React","Component","Counter","state","count","tags","batchStyle","fontSize","fontWeight","handleIncrement","bind","console","log","getBadgeClasses","formateCount","map","tag","classes"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,O;;;;;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAOC;AACA,qBAAa;AAAA;;AAAA;;AACT,kFADS,CAET;;AAFS,UAPdC,KAOc,GAPN;AACJC,MAAAA,KAAK,EAAE,CADH;AAEJC,MAAAA,IAAI,EAAC,CAAC,MAAD,EAAQ,MAAR,EAAe,MAAf;AAFD,KAOM;AAAA,UAabC,UAba,GAaF;AAACC,MAAAA,QAAQ,EAAC,EAAV;AAAcC,MAAAA,UAAU,EAAC;AAAzB,KAbE;AAGT,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,uDAAvB;AAHS;AAKZ;;;;sCAEgB;AAEVC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgC,IAAhC;AACN;;;6BAKF;AAEI,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,KAAK,EAAE,KAAKN,UAAlB;AAA8B,QAAA,SAAS,EAAE,KAAKO,eAAL,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAmE,KAAKC,YAAL,EAAnE,CADJ,EAEI;AACA,QAAA,OAAO,EAAE,KAAKL,eADd;AAEA,QAAA,SAAS,EAAC,0BAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEK,KAAKN,KAAL,CAAWE,IAAX,CAAgBU,GAAhB,CAAoB,UAAAC,GAAG;AAAA,eAAG;AAAI,UAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAeA,GAAf,CAAH;AAAA,OAAvB,CAFL,CALJ,CAAR;AAYH;;;sCAEiB;AACd,UAAIC,OAAO,GAAG,kBAAd;AACAA,MAAAA,OAAO,IAAI,KAAKd,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD;AACA,aAAOa,OAAP;AACH;;;mCAEa;AAAA,UACHb,KADG,GACM,KAAKD,KADX,CACHC,KADG,EAEV;;AACA,aAAOA,KAAK,KAAI,CAAT,GAAY,MAAZ,GAAoBA,KAA3B;AACH;;;;EApNiBH,S;;AAyNtB,eAAeC,OAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Counter extends Component {\n    //SETTING OBJECT\n    // state = { \n    //     count: 0 \n    //  };\n    // render() { \n    //     return (<div>\n    //                 <span> {this.formateCount()}</span>\n    //                 <button>Increment</button>\n    //             </div>);\n                \n                \n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     return count ===0?<h2>Zero</h2>: count;\n    // }\n\n\n\n\n    //ADD SOME MORE OBJECT ELEMENTS AND USE IT\n    // state = { \n    //     count: 0,\n    //     imageUrl : \"https://picsum.photos/200\"\n\n    //  };\n    // render() { \n    //     return (<div>\n    //                 <img src={this.state.imageUrl} alt=\"\" />\n    //                 <span> {this.formateCount()}</span>\n    //                 <button>Increment</button>\n    //             </div>);\n                \n                \n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     return count ===0?<h2>Zero</h2>: count;\n    // }\n\n\n    //SETTING ATTRIBUTIES\n    // state = { \n    //     count: 0\n\n    //  };\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() { \n    //     return (<div>\n    //                 <span style={this.batchStyle} className=\"badge badge-primary m-2\"> {this.formateCount()}</span>\n    //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n    //             </div>);\n                \n                \n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     return count ===0?<h2>Zero</h2>: count;\n    // }\n\n\n\n    //RENDERING CLASSESS DYNAMICALLY\n    // state = { \n    //     count: 1\n\n    //  };\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n\n    //     return (<div>\n    //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n    //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n    //             </div>);\n                \n                \n    // }\n\n    // getBadgeClasses() {\n    //     let classes = \"badge m-2 badge-\";\n    //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    //     return classes;\n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     //return count ===0?<h2>Zero</h2>: count;\n    //     return count ===0? \"Zero\": count;\n    // }\n\n\n    //RENDERING LISTS\n    // state = { \n    //     count: 1,\n    //     tags:['tag1','tag2','tag3']\n\n    //  };\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n\n    //     return (<div>\n    //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n    //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n    //                 <ul>\n    //                     {/* it works as for looping cause it doesnt have looping */}\n    //                     {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n    //                 </ul>\n    //             </div>);\n                \n                \n    // }\n\n    // getBadgeClasses() {\n    //     let classes = \"badge m-2 badge-\";\n    //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    //     return classes;\n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     //return count ===0?<h2>Zero</h2>: count;\n    //     return count ===0? \"Zero\": count;\n    // }\n\n\n    //CONDITIONAL RENDERING\n    // state = { \n    //     count: 1,\n    //     tags:[]\n\n    //  };\n\n    //  renderTags(){\n    //      if(this.state.tags.length ===0) return <p>There are no tags!</p>;\n    //      return <ul>{this.state.tags.map(tag => <li key=\"{tag}\">{tag}</li>)}</ul>;\n    //  }\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n\n    //     return (<div>\n    //                 {this.state.tags.length === 0 && 'please create a new tag!'}\n    //                 {this.renderTags()}\n    //             </div>);\n                \n                \n    // }\n\n\n    //HANDLING EVENTS\n    //problem: here if we create any event method, there is a problem \n    //which it can not be accessed 'this' because of strict mode \n    //so we cant access any method or variables from handler.\n    //solution: bind method or error\n    state = { \n        count: 1,\n        tags:['tag1','tag2','tag3']\n\n     };\n\n     //bind method is just use constructor\n     constructor(){\n         super();\n         //every handler needs to bind like this way\n         this.handleIncrement = this.handleIncrement.bind(this);\n\n     }\n\n     handleIncrement(){\n\n            console.log(\"Increment Clicked\",this);\n     };\n\n     \n     batchStyle={fontSize:20, fontWeight:\"bold\"};\n    render() \n    { \n\n        return (<div>\n                    <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n                    <button \n                    onClick={this.handleIncrement} \n                    className=\"btn btn-secondary btn-sm\">Increment</button>\n                    <ul>\n                        {/* it works as for looping cause it doesnt have looping */}\n                        {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n                    </ul>\n                </div>);\n                \n                \n    }\n\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += this.state.count === 0 ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formateCount(){\n        const {count} = this.state;\n        //return count ===0?<h2>Zero</h2>: count;\n        return count ===0? \"Zero\": count;\n    }\n\n\n}\n \nexport default Counter;"]},"metadata":{},"sourceType":"module"}