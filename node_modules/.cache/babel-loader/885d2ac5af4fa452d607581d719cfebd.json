{"ast":null,"code":"import _classCallCheck from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/lampp/htdocs/react_applications/start_react/start_react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/lampp/htdocs/react_applications/start_react/start_react/src/components/counter.jsx\";\nimport React, { Component } from 'react';\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Counter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      count: 1,\n      tags: ['tag1', 'tag2', 'tag3']\n    };\n\n    _this.handleIncrement = function () {\n      //inherite this by converting arro function\n      _this.setState({\n        count: _this.state.count + 1\n      });\n    };\n\n    _this.batchStyle = {\n      fontSize: 20,\n      fontWeight: \"bold\"\n    };\n    _this.state = {\n      count: 1,\n      tags: ['tag1', 'tag2', 'tag3']\n    };\n\n    _this.handleIncrement = function (product) {\n      //inherite this by converting arro function\n      console.log(product);\n\n      _this.setState({\n        count: _this.state.count + 1\n      });\n    };\n\n    _this.batchStyle = {\n      fontSize: 20,\n      fontWeight: \"bold\"\n    };\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: this.batchStyle,\n        className: this.getBadgeClasses(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \" \", this.formateCount()), React.createElement(\"button\", {\n        onClick: this.handleIncrement,\n        className: \"btn btn-secondary btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Increment\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, this.state.tags.map(function (tag) {\n        return React.createElement(\"li\", {\n          key: tag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, tag);\n      })));\n    }\n  }, {\n    key: \"getBadgeClasses\",\n    value: function getBadgeClasses() {\n      var classes = \"badge m-2 badge-\";\n      classes += this.state.count === 0 ? \"warning\" : \"primary\";\n      return classes;\n    }\n  }, {\n    key: \"formateCount\",\n    value: function formateCount() {\n      var count = this.state.count;\n      return count === 0 ? \"Zero\" : count;\n    } //STATE CHANGES\n    // state = { \n    //     count: 1,\n    //     tags:['tag1','tag2','tag3']\n    //  };\n    // handleIncrement=()=>{ //inherite this by converting arro function\n    //         this.setState({count:this.state.count + 1});\n    //  };\n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n    //     return (<div>\n    //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n    //                 <button \n    //                 onClick={this.handleIncrement} \n    //                 className=\"btn btn-secondary btn-sm\">Increment</button>\n    //                 <ul>\n    //                     {/* it works as for looping cause it doesnt have looping */}\n    //                     {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n    //                 </ul>\n    //             </div>);\n    // }\n    // getBadgeClasses() {\n    //     let classes = \"badge m-2 badge-\";\n    //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    //     return classes;\n    // }\n    // formateCount(){\n    //     const {count} = this.state;\n    //     return count ===0? \"Zero\": count;\n    // }\n    //PASSING EVENT ARGUMENTS\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: this.batchStyle,\n        className: this.getBadgeClasses(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, \" \", this.formateCount()), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.handleIncrement({\n            id: 1\n          });\n        },\n        className: \"btn btn-secondary btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, \"Increment\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, this.state.tags.map(function (tag) {\n        return React.createElement(\"li\", {\n          key: tag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336\n          },\n          __self: this\n        }, tag);\n      })));\n    }\n  }, {\n    key: \"getBadgeClasses\",\n    value: function getBadgeClasses() {\n      var classes = \"badge m-2 badge-\";\n      classes += this.state.count === 0 ? \"warning\" : \"primary\";\n      return classes;\n    }\n  }, {\n    key: \"formateCount\",\n    value: function formateCount() {\n      var count = this.state.count;\n      return count === 0 ? \"Zero\" : count;\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nexport default Counter;","map":{"version":3,"sources":["/opt/lampp/htdocs/react_applications/start_react/start_react/src/components/counter.jsx"],"names":["React","Component","Counter","state","count","tags","handleIncrement","setState","batchStyle","fontSize","fontWeight","product","console","log","getBadgeClasses","formateCount","map","tag","classes","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Counter extends Component {\n    //SETTING OBJECT\n    // state = { \n    //     count: 0 \n    //  };\n    // render() { \n    //     return (<div>\n    //                 <span> {this.formateCount()}</span>\n    //                 <button>Increment</button>\n    //             </div>);\n                \n                \n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     return count ===0?<h2>Zero</h2>: count;\n    // }\n\n\n\n\n    //ADD SOME MORE OBJECT ELEMENTS AND USE IT\n    // state = { \n    //     count: 0,\n    //     imageUrl : \"https://picsum.photos/200\"\n\n    //  };\n    // render() { \n    //     return (<div>\n    //                 <img src={this.state.imageUrl} alt=\"\" />\n    //                 <span> {this.formateCount()}</span>\n    //                 <button>Increment</button>\n    //             </div>);\n                \n                \n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     return count ===0?<h2>Zero</h2>: count;\n    // }\n\n\n    //SETTING ATTRIBUTIES\n    // state = { \n    //     count: 0\n\n    //  };\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() { \n    //     return (<div>\n    //                 <span style={this.batchStyle} className=\"badge badge-primary m-2\"> {this.formateCount()}</span>\n    //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n    //             </div>);\n                \n                \n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     return count ===0?<h2>Zero</h2>: count;\n    // }\n\n\n\n    //RENDERING CLASSESS DYNAMICALLY\n    // state = { \n    //     count: 1\n\n    //  };\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n\n    //     return (<div>\n    //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n    //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n    //             </div>);\n                \n                \n    // }\n\n    // getBadgeClasses() {\n    //     let classes = \"badge m-2 badge-\";\n    //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    //     return classes;\n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     //return count ===0?<h2>Zero</h2>: count;\n    //     return count ===0? \"Zero\": count;\n    // }\n\n\n    //RENDERING LISTS\n    // state = { \n    //     count: 1,\n    //     tags:['tag1','tag2','tag3']\n\n    //  };\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n\n    //     return (<div>\n    //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n    //                 <button className=\"btn btn-secondary btn-sm\">Increment</button>\n    //                 <ul>\n    //                     {/* it works as for looping cause it doesnt have looping */}\n    //                     {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n    //                 </ul>\n    //             </div>);\n                \n                \n    // }\n\n    // getBadgeClasses() {\n    //     let classes = \"badge m-2 badge-\";\n    //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    //     return classes;\n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     //return count ===0?<h2>Zero</h2>: count;\n    //     return count ===0? \"Zero\": count;\n    // }\n\n\n    //CONDITIONAL RENDERING\n    // state = { \n    //     count: 1,\n    //     tags:[]\n\n    //  };\n\n    //  renderTags(){\n    //      if(this.state.tags.length ===0) return <p>There are no tags!</p>;\n    //      return <ul>{this.state.tags.map(tag => <li key=\"{tag}\">{tag}</li>)}</ul>;\n    //  }\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n\n    //     return (<div>\n    //                 {this.state.tags.length === 0 && 'please create a new tag!'}\n    //                 {this.renderTags()}\n    //             </div>);\n                \n                \n    // }\n\n\n    //HANDLING EVENTS\n    //problem: here if we create any event method, there is a problem \n    //which it can not be accessed 'this' because of strict mode \n    //so we cant access any method or variables from handler.\n    //solution: bind method or convert the function into arro function \n    // state = { \n    //     count: 1,\n    //     tags:['tag1','tag2','tag3']\n\n    //  };\n\n    //  //bind method is just use constructor\n    // //  constructor(){\n    // //      super();\n    // //      //every handler needs to bind like this way\n    // //      this.handleIncrement = this.handleIncrement.bind(this);\n\n    // //  }\n\n    // // handleIncrement(){\n    // handleIncrement=()=>{ //inherite this by converting arro function\n    \n    //         console.log(\"Increment Clicked\",this);\n    //  };\n\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n\n    //     return (<div>\n    //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n    //                 <button \n    //                 onClick={this.handleIncrement} \n    //                 className=\"btn btn-secondary btn-sm\">Increment</button>\n    //                 <ul>\n    //                     {/* it works as for looping cause it doesnt have looping */}\n    //                     {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n    //                 </ul>\n    //             </div>);\n                \n                \n    // }\n\n    // getBadgeClasses() {\n    //     let classes = \"badge m-2 badge-\";\n    //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    //     return classes;\n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     //return count ===0?<h2>Zero</h2>: count;\n    //     return count ===0? \"Zero\": count;\n    // }\n\n\n\n    //UPDATING THE STATE\n    state = { \n        count: 1,\n        tags:['tag1','tag2','tag3']\n\n     };\n\n    \n    handleIncrement=()=>{ //inherite this by converting arro function\n    \n            this.setState({count:this.state.count + 1});\n     };\n\n     \n     batchStyle={fontSize:20, fontWeight:\"bold\"};\n    render() \n    { \n\n        return (<div>\n                    <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n                    <button \n                    onClick={this.handleIncrement} \n                    className=\"btn btn-secondary btn-sm\">Increment</button>\n                    <ul>\n                        {/* it works as for looping cause it doesnt have looping */}\n                        {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n                    </ul>\n                </div>);\n                \n                \n    }\n\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += this.state.count === 0 ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formateCount(){\n        const {count} = this.state;\n        return count ===0? \"Zero\": count;\n    }\n\n\n\n    //STATE CHANGES\n    // state = { \n    //     count: 1,\n    //     tags:['tag1','tag2','tag3']\n\n    //  };\n\n    \n    // handleIncrement=()=>{ //inherite this by converting arro function\n    \n    //         this.setState({count:this.state.count + 1});\n    //  };\n\n     \n    //  batchStyle={fontSize:20, fontWeight:\"bold\"};\n    // render() \n    // { \n\n    //     return (<div>\n    //                 <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n    //                 <button \n    //                 onClick={this.handleIncrement} \n    //                 className=\"btn btn-secondary btn-sm\">Increment</button>\n    //                 <ul>\n    //                     {/* it works as for looping cause it doesnt have looping */}\n    //                     {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n    //                 </ul>\n    //             </div>);\n                \n                \n    // }\n\n    // getBadgeClasses() {\n    //     let classes = \"badge m-2 badge-\";\n    //     classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    //     return classes;\n    // }\n\n    // formateCount(){\n    //     const {count} = this.state;\n    //     return count ===0? \"Zero\": count;\n    // }\n\n\n\n    //PASSING EVENT ARGUMENTS\n    state = { \n        count: 1,\n        tags:['tag1','tag2','tag3']\n\n     };\n\n    \n    handleIncrement= product=>{ //inherite this by converting arro function\n            console.log(product)\n            this.setState({count:this.state.count + 1});\n     };\n\n\n     \n     batchStyle={fontSize:20, fontWeight:\"bold\"};\n    render() \n    { \n\n        return (<div>\n                    <span style={this.batchStyle} className={this.getBadgeClasses()}> {this.formateCount()}</span>\n                    <button \n                    onClick={() =>this.handleIncrement({id:1})} \n                    className=\"btn btn-secondary btn-sm\">Increment</button>\n                    <ul>\n                        {/* it works as for looping cause it doesnt have looping */}\n                        {this.state.tags.map(tag =><li key={tag}>{tag}</li>)}\n                    </ul>\n                </div>);\n                \n                \n    }\n\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += this.state.count === 0 ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formateCount(){\n        const {count} = this.state;\n        return count ===0? \"Zero\": count;\n    }\n\n\n\n}\n \nexport default Counter;"]},"metadata":{},"sourceType":"module"}